// Generated by CoffeeScript 1.6.3
var Node, NodeStorage;

Array.prototype.pop = function(i) {
  if (i != null) {
    return this.splice(i, 1)[0];
  }
  return this.splice(this.length - 1, 1)[0];
};

Array.prototype.last = function() {
  return this[this.length - 1];
};

NodeStorage = (function() {
  function NodeStorage() {
    this.nodes = [];
    this.lastId = 0;
  }

  NodeStorage.prototype.push = function(node) {
    node.id = this.lastId++;
    return this.nodes.push(node);
  };

  NodeStorage.prototype.deleteById = function(id) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.nodes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if ((this.nodes[i] != null) && this.nodes[i].id === id) {
        _results.push(this.nodes.pop(i));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  NodeStorage.prototype.get = function(name) {
    var node, _i, _len, _ref;
    _ref = this.nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (node.name === name) {
        return node;
      }
    }
  };

  return NodeStorage;

})();

NodeStorage = new NodeStorage();

Node = (function() {
  function Node(name, type, __hasChildren) {
    var id, node, _i, _len, _ref;
    this.name = name;
    this.type = type;
    this.__hasChildren = __hasChildren;
    if (this.name.lastIndexOf("/") === this.name.length - 1) {
      this.name = this.name.substring(0, this.name.length - 1);
    }
    if (!this.name) {
      this.name = "/";
    }
    this.path = this.name.split("/").slice(1);
    if (this.name === "/") {
      this.path = ["/"];
    }
    this.children = [];
    _ref = NodeStorage.nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (node.name === name) {
        id = node.id;
        node = this;
        node.id = id;
        return;
      }
      if (this.isChildOf(node)) {
        node.children.push(this);
      }
    }
    NodeStorage.push(this);
  }

  Node.prototype.isChildOf = function(node) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = node.path.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (node.path[i] === "/") {
        return true;
      }
      if (this.path[i] !== node.path[i]) {
        return false;
      }
    }
    return true;
  };

  Node.prototype["delete"] = function() {
    var child, _i, _len, _ref;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      NodeStorage.deleteById(child.id);
    }
    return NodeStorage.deleteById(this.id);
  };

  Node.prototype.hasChildren = function() {
    if (this.children.length) {
      return true;
    }
    if (this.__hasChildren) {
      return true;
    }
    return false;
  };

  Node.prototype.createChild = function(suffix, type, __hasChildren) {
    var name, node;
    name = this.name + "/" + suffix;
    if (this.name === "/") {
      name = "/" + suffix;
    }
    node = new Node(name, type, __hasChildren);
    return node;
  };

  return Node;

})();
